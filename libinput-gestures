#!/usr/bin/env python3
'Read gestures from libinput touchpad and action shell commands.'
# Mark Blakeney, Sep 2015
import os, sys, argparse, subprocess, shlex, re, getpass, fcntl
from pathlib import Path

PROG = Path(sys.argv[0]).name

# Conf file containing gesture commands.
# Search first for user file then system file.
CONFNAME = '{}.conf'.format(PROG)
USERDIR = os.getenv('XDG_CONFIG_DIR', os.path.expanduser('~/.config'))
CONFDIRS = (USERDIR, '/etc')

# Set up command line arguments
opt = argparse.ArgumentParser(description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
opt.add_argument('-c', '--conffile',
        help='Gestures alternative configuration file')
opt.add_argument('-v', '--verbose', action='store_true',
        help='Output diagnostic messages')
opt.add_argument('-r', '--raw', action='store_true',
        help='Output raw libinput-debug-event messages only, '
        'do not action gestures')
opt.add_argument('-d', '--debug', action='store_true',
        help='Output diagnostic messages only, do not action gestures')
args = opt.parse_args()

if args.debug:
    args.verbose = True

def open_lock(*args):
    'Create a lock based on given list of arguments'
    # We use exclusive assess to a file for this
    fp = Path('/tmp', '-'.join(args) + '.lock').open('w')
    try:
        fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        return None

    return fp

def run(*args, check=True, **kwargs):
    'Run subprocess function and return result'
    # Maintain compatability with python 3.4.
    class result: pass
    result.stdout = None
    result.stderr = None
    result.returncode = 0
    try:
        result.stdout = subprocess.check_output(*args, **kwargs,
                stderr=(None if check else subprocess.DEVNULL),
                universal_newlines=True)
    except Exception as e:
        result.stderr = str(e)
        result.returncode = 1
        if check:
            print(result.stderr, file=sys.stderr)

    return result

def internal(args):
    'Internal command handler.'
    # Commands currently supported are:
    commands = (
        'ws_up',
        'ws_down',
    )
    # Set up command line arguments
    opti = argparse.ArgumentParser(description=__doc__)
    opti.add_argument('--row', type=int,
            help='Step along the row for this number in a row')
    opti.add_argument('--col', type=int,
            help='Step along the column for this number in a column')
    opti.add_argument('action', choices=commands,
            help='Internal command to action')
    argsi = opti.parse_args(args)

    # Get list of current workspaces
    res = run(['wmctrl', '-d'], check=False)
    if res.returncode != 0:
        # This command can fail on GNOME when you have only a single
        # dynamic workspace using Xorg (probably a GNOME bug) so let's
        # just ignore it given there is no other workspace to switch to
        # anyhow.
        return

    out = res.stdout.strip().splitlines()
    lines = [l.split(maxsplit=3)[1] for l in out]
    index = lines.index('*')

    if argsi.row:
        minindex = index - (index % argsi.row)
        maxindex = minindex + argsi.row
        count = 1
    else:
        minindex = 0
        maxindex = len(lines)
        count = (maxindex // argsi.col) if argsi.col else 1

    # Switch to desired workspace
    index += count if argsi.action == 'ws_up' else -count
    if index >= minindex and index < maxindex:
        run(['wmctrl', '-s', str(index)])

def get_device():
    'Determine libinput touchpad device path'
    res = run('libinput-list-devices')
    if res.returncode == 0:
        dev = None
        for line in res.stdout.splitlines():
            line = line.strip()
            if not line or ':' not in line:
                continue

            key, value = line.split(':', maxsplit=1)
            key = key.strip()
            value = value.strip()

            # Assume that any device that has any Tap-to-click value is a
            # touchpad.
            if key == 'Kernel':
                dev = value
            elif key == 'Tap-to-click' and value != 'n/a' and dev:
                return dev

    sys.exit('Could not determine touchpad device.')

class GESTURE:
    'Abstract base class for handling for gestures'
    def __init__(self):
        'Initialise this gesture at program start'
        self.name = type(self).__name__
        self.motions = {}

    def add(self, motion, fingers, command):
        'Add a configured motion command for this gesture'
        if motion not in self.SUPPORTED_MOTIONS:
            return 'Motion "{}" is not supported for {}'.format(motion,
                    self.name)

        key = (motion, fingers) if fingers else motion
        self.motions[key] = shlex.split(command)
        return None

    def action(self, motion):
        'Action a motion command for this gesture'

        command = self.motions.get((motion, self.fingers)) or \
                self.motions.get(motion)

        if args.verbose:
            print('{}: {} {} {} {}'.format(PROG, self.name, motion,
                self.fingers, self.data))
            if command:
                print('  ', ' '.join(command))

        if command and not args.debug:
            if command[0] == '_internal':
                internal(command[1:])
            else:
                run(command)

class SWIPE(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('left', 'right', 'up', 'down')
    threshold = 70

    def begin(self, fingers):
        'Initialise this gesture at the start of motion'
        self.fingers = fingers
        self.data = [0.0, 0.0]

    def update(self, coords):
        'Update this gesture for a motion'
        self.data[0] += float(coords[2])
        self.data[1] += float(coords[3])
        if abs(self.data[0] - self.data[1]) >= self.threshold:
            self.end()
            return True

    def end(self):
        'Action this gesture at the end of a motion sequence'
        # Require movement beyond a small threshhold.
        if abs(self.data[0] - self.data[1]) >= self.threshold:
            if abs(self.data[0]) > abs(self.data[1]):
                motion = 'left' if self.data[0] < 0 else 'right'
            else:
                motion = 'up' if self.data[1] < 0 else 'down'

            self.action(motion)

class PINCH(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('in', 'out')
    threshold = 0.1

    def begin(self, fingers):
        'Initialise this gesture at the start of motion'
        self.fingers = fingers
        self.data = 0.0

    def update(self, coords):
        'Update this gesture for a motion'
        self.data += 1.0 - float(coords[5])
        if abs(self.data) > self.threshold:
            self.end()
            return True

    def end(self):
        'Action this gesture at the end of a motion sequence'
        if abs(self.data) > self.threshold:
            self.action('in' if self.data >= 0.0 else 'out')

# Create gesture handler instances and insert them in handler lookup
# table based on their name.
handlers = {h.name: h for h in (SWIPE(), PINCH())}

def get_conf_line(line):
    'Process a single line in conf file'
    fields = line.split(maxsplit=3)

    # Look for configured gesture. Sanity check the line.
    if len(fields) < 4:
        return 'Invalid gesture line'

    key, gesture, motion, command = fields

    if key != 'gesture:':
        return 'Configuration command "{}" is not supported'.format(key)

    handler = handlers.get(gesture.upper())
    if not handler:
        return 'Gesture "{}" is not supported'.format(gesture)

    # Gesture command can be configured with optional specific finger
    # count so look for that
    fingers = None
    fcommand = command.split(maxsplit=1)
    if len(fcommand) > 1:
        fcount, ncommand = fcommand
        if fcount.isdigit() and len(fcount) == 1:
            command = ncommand
            fingers = fcount

    # Add the configured gesture
    return handler.add(motion.lower(), fingers, command)

def get_conf(conffile):
    '''
    Read configuration file, given path. Returns True if file exists and
    was read.
    '''
    if not conffile.exists():
        return False

    with conffile.open() as fp:
        for line in fp:
            line = line.strip()
            if not line or line[0] == '#':
                continue

            errmsg = get_conf_line(line)
            if errmsg:
                sys.exit('Error in file {} at line:\n{}.\n{}.'.format(
                    conffile, line, errmsg))
    return True

# Make sure only one instance running for current user
user = getpass.getuser()
proglock = open_lock(PROG, user)
if not proglock:
    sys.exit('{} is already running for {}, terminating ..'.format(PROG, user))

# Get touchpad device
device = get_device()

# Read gestures from conf file. Use file given as command line argument,
# else look in user dir then system dir.
if not args.raw:
    if args.conffile:
        conf = Path(args.conffile)
        if not get_conf(conf):
            sys.exit('Conf file "{}" does not exist.'.format(args.conffile))
    else:
        for confdir in CONFDIRS:
            conf = Path(confdir, CONFNAME)
            if get_conf(conf):
                break
        else:
            sys.exit('No file {} in {}.'.format(CONFNAME,
                ' or '.join(CONFDIRS)))

    if args.verbose:
        print('{}: using {}'.format(PROG, conf))
        print('{}: monitoring device {} for {} gestures'.format(PROG, device,
            sum([len(h.motions) for h in handlers.values()])))

# Note your must "sudo gpasswd -a $USER input" then log out/in for
# permission to access the device.
command = 'stdbuf -oL -- libinput-debug-events --device {}'.format(device)

cmd = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE,
        bufsize=0, universal_newlines=True)

# Sit in a loop forever reading the libinput debug output for GESTURES ..
handler = None
for line in cmd.stdout:

    # Just output raw messages if in that debug mode
    if args.raw:
        print(line.strip())
        continue

    # Only interested in gestures
    if 'GESTURE_' not in line:
        continue

    # Split debug line into relevant fields
    dev, gevent, time, other = line.strip().split(maxsplit=3)
    gesture, event = gevent[8:].split('_')
    if ' ' in other:
        fingers, params = other.split(maxsplit=1)
    else:
        fingers, params = other, None

    # Action each type of event
    if event == 'UPDATE':
        if handler:
            result = handler.update(re.split(r'[ (/@]+', params))
            if result:
                handler = None
    elif event == 'BEGIN':
        handler = handlers.get(gesture)
        if handler:
            handler.begin(fingers)
        else:
            print('Unknown gesture received: {}.'.format(gesture),
                    file=sys.stderr)
    elif event == 'END':
        # Ignore gesture if final action is cancelled
        if params != 'cancelled' and handler:
            handler.end()
        handler = None
    else:
        print('Unknown gesture + event received: {} + {}.'.format(gesture,
            event), file=sys.stderr)
